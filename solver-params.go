// This file presents an interface to SAPI types and functions related to
// solver parameters.  It is generated by the gen-solver-params script
// during "go generate".

package sapi

// #cgo LDFLAGS: -ldwave_sapi
// #include <stdio.h>
// #include <stdlib.h>
// #include <dwave_sapi.h>
import "C"

import (
	"strings"
	"unsafe"
)

// A SolverParameterAnswerMode indicates the format in which we want the solver
// to return solutions.
type SolverParameterAnswerMode int

// These are answer modes a solver can accept.
const (
	AnswerModeHistogram SolverParameterAnswerMode = C.SAPI_ANSWER_MODE_HISTOGRAM
	AnswerModeRaw                                 = C.SAPI_ANSWER_MODE_RAW
)

// Postprocessing indicates the type of postprocessing the solver should perform.
type Postprocessing int

// These are the supported types of postprocessing a solver can perform.
const (
	PostprocessNode         Postprocessing = C.SAPI_POSTPROCESS_NONE
	PostprocessSampling                    = C.SAPI_POSTPROCESS_SAMPLING
	PostprocessOptimization                = C.SAPI_POSTPROCESS_OPTIMIZATION
)

// SolverParameters is presented as an interface so the caller does not need to
// use different data structures for the different solver types (quantum or the
// various software solvers).
type SolverParameters interface {
	SetAnnealingTime(at int)
	SetAnswerMode(m SolverParameterAnswerMode)
	SetAutoScale(y bool)
	SetBeta(b float64)
	SetChains(cs []int)
	SetMaxAnswers(ma int)
	SetNumReads(nr int)
	SetNumSpinReversals(sr int)
	SetPostprocessing(pp Postprocessing)
	SetProgTherm(pt int)
	SetReadoutTherm(rt int)
	ToC() *C.sapi_SolverParameters
}

// NewSolverParameters returns an appropriate SolverParameters for the solver
// type.
func (s *Solver) NewSolverParameters() SolverParameters {
	switch {
	case strings.HasSuffix(s.Name, "-sw_optimize"):
		return NewSwOptimizeSolverParameters()
	case strings.HasSuffix(s.Name, "-sw_sample"):
		return NewSwSampleSolverParameters()
	case strings.HasSuffix(s.Name, "-heuristic"):
		return NewSwHeuristicSolverParameters()
	default:
		return NewQuantumSolverParameters()
	}
}

// A SwSampleSolverParameters represents the parameters that can be passed to a
// sampling software solver.  It implements the SolverParameters interface.
type SwSampleSolverParameters struct {
	sssp C.sapi_SwSampleSolverParameters
}

// A SwOptimizeSolverParameters represents the parameters that can be passed to
// an optimizing software solver.  It implements the SolverParameters
// interface.
type SwOptimizeSolverParameters struct {
	sosp C.sapi_SwOptimizeSolverParameters
}

// A SwHeuristicSolverParameters represents the parameters that can be passed
// to a heuristic software solver.  It implements the SolverParameters
// interface.
type SwHeuristicSolverParameters struct {
	shsp C.sapi_SwHeuristicSolverParameters
}

// A QuantumSolverParameters represents the parameters that can be passed to a
// quantum solver.  It implements the SolverParameters interface.
type QuantumSolverParameters struct {
	qsp C.sapi_QuantumSolverParameters
}

// NewSwSampleSolverParameters returns a new SwSampleSolverParameters.
func NewSwSampleSolverParameters() *SwSampleSolverParameters {
	return &SwSampleSolverParameters{
		sssp: C.SAPI_SW_SAMPLE_SOLVER_DEFAULT_PARAMETERS,
	}
}

// NewSwOptimizeSolverParameters returns a new SwOptimizeSolverParameters.
func NewSwOptimizeSolverParameters() *SwOptimizeSolverParameters {
	return &SwOptimizeSolverParameters{
		sosp: C.SAPI_SW_OPTIMIZE_SOLVER_DEFAULT_PARAMETERS,
	}
}

// NewSwHeuristicSolverParameters returns a new SwHeuristicSolverParameters.
func NewSwHeuristicSolverParameters() *SwHeuristicSolverParameters {
	return &SwHeuristicSolverParameters{
		shsp: C.SAPI_SW_HEURISTIC_SOLVER_DEFAULT_PARAMETERS,
	}
}

// NewQuantumSolverParameters returns a new QuantumSolverParameters.
func NewQuantumSolverParameters() *QuantumSolverParameters {
	return &QuantumSolverParameters{
		qsp: C.SAPI_QUANTUM_SOLVER_DEFAULT_PARAMETERS,
	}
}

// SetAnnealingTime specifies the annealing time in microseconds.
// For SwSampleSolverParameters, this method is a no-op.
func (p *SwSampleSolverParameters) SetAnnealingTime(at int) {
}

// SetAnnealingTime specifies the annealing time in microseconds.
// For SwOptimizeSolverParameters, this method is a no-op.
func (p *SwOptimizeSolverParameters) SetAnnealingTime(at int) {
}

// SetAnnealingTime specifies the annealing time in microseconds.
// For SwHeuristicSolverParameters, this method is a no-op.
func (p *SwHeuristicSolverParameters) SetAnnealingTime(at int) {
}

// SetAnnealingTime specifies the annealing time in microseconds.
func (p *QuantumSolverParameters) SetAnnealingTime(at int) {
	p.qsp.annealing_time = C.int(at)
}

// SetAnswerMode specifies the form in which we want to see the solver's output.
func (p *SwSampleSolverParameters) SetAnswerMode(m SolverParameterAnswerMode) {
	p.sssp.answer_mode = C.sapi_SolverParameterAnswerMode(m)
}

// SetAnswerMode specifies the form in which we want to see the solver's output.
func (p *SwOptimizeSolverParameters) SetAnswerMode(m SolverParameterAnswerMode) {
	p.sosp.answer_mode = C.sapi_SolverParameterAnswerMode(m)
}

// SetAnswerMode specifies the form in which we want to see the solver's output.
// For SwHeuristicSolverParameters, this method is a no-op.
func (p *SwHeuristicSolverParameters) SetAnswerMode(m SolverParameterAnswerMode) {
}

// SetAnswerMode specifies the form in which we want to see the solver's output.
func (p *QuantumSolverParameters) SetAnswerMode(m SolverParameterAnswerMode) {
	p.qsp.answer_mode = C.sapi_SolverParameterAnswerMode(m)
}

// SetAutoScale specifies whether coefficients should be automatically scaled.
// For SwSampleSolverParameters, this method is a no-op.
func (p *SwSampleSolverParameters) SetAutoScale(y bool) {
}

// SetAutoScale specifies whether coefficients should be automatically scaled.
// For SwOptimizeSolverParameters, this method is a no-op.
func (p *SwOptimizeSolverParameters) SetAutoScale(y bool) {
}

// SetAutoScale specifies whether coefficients should be automatically scaled.
// For SwHeuristicSolverParameters, this method is a no-op.
func (p *SwHeuristicSolverParameters) SetAutoScale(y bool) {
}

// SetAutoScale specifies whether coefficients should be automatically scaled.
func (p *QuantumSolverParameters) SetAutoScale(y bool) {
	if y {
		p.qsp.auto_scale = 1
	} else {
		p.qsp.auto_scale = 0
	}
}

// SetBeta specifies the Boltzmann distribution parameter.
func (p *SwSampleSolverParameters) SetBeta(b float64) {
	p.sssp.beta = C.double(b)
}

// SetBeta specifies the Boltzmann distribution parameter.
// For SwOptimizeSolverParameters, this method is a no-op.
func (p *SwOptimizeSolverParameters) SetBeta(b float64) {
}

// SetBeta specifies the Boltzmann distribution parameter.
// For SwHeuristicSolverParameters, this method is a no-op.
func (p *SwHeuristicSolverParameters) SetBeta(b float64) {
}

// SetBeta specifies the Boltzmann distribution parameter.
func (p *QuantumSolverParameters) SetBeta(b float64) {
	p.qsp.beta = C.double(b)
}

// SetChains indicates where all the chains lie.  The value of c[i] means c[i]
// contains qubit i; -1 means a singleton chain.
// For SwSampleSolverParameters, this method is a no-op.
func (p *SwSampleSolverParameters) SetChains(cs []int) {
}

// SetChains indicates where all the chains lie.  The value of c[i] means c[i]
// contains qubit i; -1 means a singleton chain.
// For SwOptimizeSolverParameters, this method is a no-op.
func (p *SwOptimizeSolverParameters) SetChains(cs []int) {
}

// SetChains indicates where all the chains lie.  The value of c[i] means c[i]
// contains qubit i; -1 means a singleton chain.
// For SwHeuristicSolverParameters, this method is a no-op.
func (p *SwHeuristicSolverParameters) SetChains(cs []int) {
}

// SetChains indicates where all the chains lie.  The value of c[i] means c[i]
// contains qubit i; -1 means a singleton chain.
func (p *QuantumSolverParameters) SetChains(cs []int) {
	if len(cs) == 0 {
		p.qsp.chains = nil
		return
	}
	nc := C.size_t(len(cs))
	chains := (*C.sapi_Chains)(C.malloc(C.sizeof_sapi_Chains))
	chains.len = nc
	elts := C.malloc(C.sizeof_int * nc)
	ePtr := (*[1 << 30]C.int)(elts)[:nc:nc]
	for i, c := range cs {
		ePtr[i] = C.int(c)
	}
	chains.elements = (*C.int)(elts)
	p.qsp.chains = chains
}

// SetMaxAnswers specifies the maximum number of answers the solver should
// return.
func (p *SwSampleSolverParameters) SetMaxAnswers(ma int) {
	p.sssp.max_answers = C.int(ma)
}

// SetMaxAnswers specifies the maximum number of answers the solver should
// return.
func (p *SwOptimizeSolverParameters) SetMaxAnswers(ma int) {
	p.sosp.max_answers = C.int(ma)
}

// SetMaxAnswers specifies the maximum number of answers the solver should
// return.
// For SwHeuristicSolverParameters, this method is a no-op.
func (p *SwHeuristicSolverParameters) SetMaxAnswers(ma int) {
}

// SetMaxAnswers specifies the maximum number of answers the solver should
// return.
func (p *QuantumSolverParameters) SetMaxAnswers(ma int) {
	p.qsp.max_answers = C.int(ma)
}

// SetNumReads specifies the number of reads to take.
func (p *SwSampleSolverParameters) SetNumReads(nr int) {
	p.sssp.num_reads = C.int(nr)
}

// SetNumReads specifies the number of reads to take.
func (p *SwOptimizeSolverParameters) SetNumReads(nr int) {
	p.sosp.num_reads = C.int(nr)
}

// SetNumReads specifies the number of reads to take.
// For SwHeuristicSolverParameters, this method is a no-op.
func (p *SwHeuristicSolverParameters) SetNumReads(nr int) {
}

// SetNumReads specifies the number of reads to take.
func (p *QuantumSolverParameters) SetNumReads(nr int) {
	p.qsp.num_reads = C.int(nr)
}

// SetNumSpinReversals specifies the number of spin-reversal transformations to
// perform.
// For SwSampleSolverParameters, this method is a no-op.
func (p *SwSampleSolverParameters) SetNumSpinReversals(sr int) {
}

// SetNumSpinReversals specifies the number of spin-reversal transformations to
// perform.
// For SwOptimizeSolverParameters, this method is a no-op.
func (p *SwOptimizeSolverParameters) SetNumSpinReversals(sr int) {
}

// SetNumSpinReversals specifies the number of spin-reversal transformations to
// perform.
// For SwHeuristicSolverParameters, this method is a no-op.
func (p *SwHeuristicSolverParameters) SetNumSpinReversals(sr int) {
}

// SetNumSpinReversals specifies the number of spin-reversal transformations to
// perform.
func (p *QuantumSolverParameters) SetNumSpinReversals(sr int) {
	p.qsp.num_spin_reversal_transforms = C.int(sr)
}

// SetPostprocessing requests the the solver's output be postprocessed.
// For SwSampleSolverParameters, this method is a no-op.
func (p *SwSampleSolverParameters) SetPostprocessing(pp Postprocessing) {
}

// SetPostprocessing requests the the solver's output be postprocessed.
// For SwOptimizeSolverParameters, this method is a no-op.
func (p *SwOptimizeSolverParameters) SetPostprocessing(pp Postprocessing) {
}

// SetPostprocessing requests the the solver's output be postprocessed.
// For SwHeuristicSolverParameters, this method is a no-op.
func (p *SwHeuristicSolverParameters) SetPostprocessing(pp Postprocessing) {
}

// SetPostprocessing requests the the solver's output be postprocessed.
func (p *QuantumSolverParameters) SetPostprocessing(pp Postprocessing) {
	p.qsp.postprocess = C.sapi_Postprocess(pp)
}

// SetProgTherm specifies the time in microseconds to wait after programming
// the quantum processor in order for it to cool back to base temperature.
// For SwSampleSolverParameters, this method is a no-op.
func (p *SwSampleSolverParameters) SetProgTherm(pt int) {
}

// SetProgTherm specifies the time in microseconds to wait after programming
// the quantum processor in order for it to cool back to base temperature.
// For SwOptimizeSolverParameters, this method is a no-op.
func (p *SwOptimizeSolverParameters) SetProgTherm(pt int) {
}

// SetProgTherm specifies the time in microseconds to wait after programming
// the quantum processor in order for it to cool back to base temperature.
// For SwHeuristicSolverParameters, this method is a no-op.
func (p *SwHeuristicSolverParameters) SetProgTherm(pt int) {
}

// SetProgTherm specifies the time in microseconds to wait after programming
// the quantum processor in order for it to cool back to base temperature.
func (p *QuantumSolverParameters) SetProgTherm(pt int) {
	p.qsp.programming_thermalization = C.int(pt)
}

// SetReadoutTherm specifies the time in microseconds to wait after each state
// is read from the quantum processor in order for it to cool back to base
// temperature.
// For SwSampleSolverParameters, this method is a no-op.
func (p *SwSampleSolverParameters) SetReadoutTherm(pt int) {
}

// SetReadoutTherm specifies the time in microseconds to wait after each state
// is read from the quantum processor in order for it to cool back to base
// temperature.
// For SwOptimizeSolverParameters, this method is a no-op.
func (p *SwOptimizeSolverParameters) SetReadoutTherm(pt int) {
}

// SetReadoutTherm specifies the time in microseconds to wait after each state
// is read from the quantum processor in order for it to cool back to base
// temperature.
// For SwHeuristicSolverParameters, this method is a no-op.
func (p *SwHeuristicSolverParameters) SetReadoutTherm(pt int) {
}

// SetReadoutTherm specifies the time in microseconds to wait after each state
// is read from the quantum processor in order for it to cool back to base
// temperature.
func (p *QuantumSolverParameters) SetReadoutTherm(pt int) {
	p.qsp.readout_thermalization = C.int(pt)
}

// ToC converts a SwSampleSolverParameters to a sapi_SolverParameters.
func (p *SwSampleSolverParameters) ToC() *C.sapi_SolverParameters {
	return (*C.sapi_SolverParameters)(unsafe.Pointer(&p.sssp))
}

// ToC converts a SwOptimizeSolverParameters to a sapi_SolverParameters.
func (p *SwOptimizeSolverParameters) ToC() *C.sapi_SolverParameters {
	return (*C.sapi_SolverParameters)(unsafe.Pointer(&p.sosp))
}

// ToC converts a SwHeuristicSolverParameters to a sapi_SolverParameters.
func (p *SwHeuristicSolverParameters) ToC() *C.sapi_SolverParameters {
	return (*C.sapi_SolverParameters)(unsafe.Pointer(&p.shsp))
}

// ToC converts a QuantumSolverParameters to a sapi_SolverParameters.
func (p *QuantumSolverParameters) ToC() *C.sapi_SolverParameters {
	return (*C.sapi_SolverParameters)(unsafe.Pointer(&p.qsp))
}
